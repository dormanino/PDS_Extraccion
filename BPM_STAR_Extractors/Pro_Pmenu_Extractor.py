import os
import json
import datetime
import LatestFileVersion
from BPM_STAR_Extractors.DataPoint import DataPoint
from BPM_STAR_Extractors.String_Parser import Parse


class Xyz:

    @staticmethod
    def load_12mpp_raw():
        # TODO: fetch from external data provider
        data = json.load(open(DataPoint.data_12mpp))
        return data
        # optionals = []
        # for optional_data in data:
        #     optional = Optional(optional_data['id'], optional_data['neg'])
        #     optionals.append(optional)
        # return Optionals(optionals)

    @staticmethod
    def load_b3902v_raw():
        # TODO: fetch from external data provider
        # file generated by external app as xxxxxxfinal_variant_data.json

        data = json.load(open(DataPoint.data_b3902v))
        return data
        # optionals = []
        # for optional_data in data:
        #     optional = Optional(optional_data['id'], optional_data['neg'])
        #     optionals.append(optional)
        # return Optionals(optionals)

    @staticmethod
    def load_12mpp_parsed():
        # TODO: fetch from external data provider
        # file generated by 12MPP_Extractor Class as xxxxxx12mpp.json

        data = json.load(open(DataPoint.data_12mpp_parsed))
        return data
        # optionals = []
        # for optional_data in data:
        #     optional = Optional(optional_data['id'], optional_data['neg'])
        #     optionals.append(optional)
        # return Optionals(optionals)

    @staticmethod
    def string_divide(string, div):
        l = []
        strp = ''
        i = 0
        while i < len(string):
            strp = string[i:i + div].strip().replace(" ", "")
            if strp != '':
                if Xyz.is_float_try(strp):
                    strp = int(strp)
                l.append(strp)
            i += div
        return l

    # def string_divide(string, div):
    #     l = []
    #     strp = ''
    #     for i in range (0, len (string), div):
    #         strp = string[i:i + div].strip().replace(" ", "")
    #         if strp != '':
    #             if Xyz.is_float_try(strp):
    #                 strp = int(strp)
    #             l.append(strp)
    #     return l

    @staticmethod
    def is_float_try(string):
        try:
            float(string)
            return True
        except ValueError:
            return False

    @staticmethod
    def zyx():
        return Xyz.load_b3902v_raw()


class MakeFile:

    @staticmethod
    def parsed_12mpp():
        # generates file xxxxxx12mpp_parsed based on xxxxxx12mpp.json('raw')
        x = Xyz.load_12mpp_raw()
        nd = {}
        lista = []
        month_list = ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez', 'total']

        for key, val in x.items():
            for i in val[1]:
                lista = Parse.parse(i)
            # TODO: change json from list with one string to only string
            nd[key[slice(1, 29)].strip().replace(' ', '')] = dict(zip(month_list, lista))

        date = datetime.date.today()
        date_string = date.strftime('%y%m%d')

        with open(os.getcwd() + '\\DataPoint\\' + date_string + '12mpp_parsed.json', 'w') as f:
            json.dump(nd, f, indent=4, sort_keys=True, ensure_ascii=False)


MakeFile.parsed_12mpp()

b3902v = Xyz.zyx()
dozempp = Xyz.load_12mpp_parsed()
# TODO: dict comprehension
dicto_tst = {}
for b in b3902v:
    dicto_tst[str(b['variant'])] = b['baumuster'][0:7]

# infos = {str(d['baumuster'])[0:7]: d['variant'] for d in b3902v[1].keys & {'baumuster', 'variant'}}

final_dict = {}
# TODO: dict comprehension
for dc in dozempp:
    if dozempp[dc]['total'] != '0':
        final_dict[dc] = dozempp[dc]['total']

for f in final_dict:
    for b in dicto_tst:
        if f == b:
            volume = final_dict[f]
            final_dict[f] = dicto_tst[b], volume
            break

set_bm = set()
for dt in final_dict.values():
    set_bm.add(dt[0])
print(set_bm)


data_sum = 0
dict_tst = {}
data_tot_sum = 0
for po in set_bm:
    for dt in final_dict.items():
        if po == dt[1][0]:
            data_sum += int(dt[1][1])
    data_tot_sum += data_sum
    dict_tst[po] = data_sum
    data_sum = 0

print(dict_tst)
print(data_tot_sum)

date = datetime.date.today()
date_string = date.strftime('%y%m%d')

with open(date_string + 'bmvol.json', 'w') as f:
    json.dump(final_dict, f, indent=2, sort_keys=True, ensure_ascii=False)

with open(date_string + 'bmvol_tot.json', 'w') as f:
    json.dump(dict_tst, f, sort_keys=True, ensure_ascii=False)
